name: microshop
services:
  web:
    container_name: web
    build:
      context: ./
      dockerfile: apps/ui/Dockerfile
    develop:
      watch:
        - path: ./apps/ui
          action: sync
          target: /app/apps/ui
          ignore:
            - node_modules/
    ports:
      - '6969:3000'

  gateway:
    container_name: gateway
    build:
      context: ./
      dockerfile: apps/gateway/Dockerfile
    develop:
      watch:
        - path: ./apps/gateway
          action: sync
          target: /app/apps/gateway
          ignore:
            - node_modules/
    ports:
      - '80:3000'

  product:
    container_name: product
    build:
      context: .
      dockerfile: apps/product/Dockerfile
    develop:
      watch:
        - path: ./apps/product
          action: sync
          target: /app/apps/product
          ignore:
            - node_modules/
    depends_on:
      - product_db

  product_db:
    container_name: product_db
    image: postgres:15.1-alpine
    volumes:
      - product_data:/var/lib/postgres/data
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
    restart: unless-stopped
    ports:
      - '5433:5432'
  # gateway:
  #   # The :watch image restarts the service automatically when the configuration files change.
  #   # Do not use this image in production, it's meant to speed up your testing and development.
  #   image: devopsfaith/krakend:watch
  #   container_name: gateway
  #   volumes:
  #     - ./config/krakend:/etc/krakend
  #   ports:
  #     - '1234:1234'
  #     - '9008:8080'
  #     - '8090:8090'
  #   command: ['run', '-d', '-c', '/etc/krakend/gateway.json']
  #   healthcheck:
  #     test: ['CMD', 'wget', '-f', 'http://localhost:8080/__health']
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5

  # nginx:
  #   container_name: nginx
  #   image: nginx:1.17-alpine
  #   volumes:
  #     - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf
  #   ports:
  #     - '80:80'
  #     - '443:443'

  # grafana:
  #   container_name: grafana
  #   image: grafana/grafana:10.2.2-ubuntu
  #   restart: unless-stopped
  #   user: '0'
  #   environment:
  #     - GF_SERVER_ROOT_URL=http://my.grafana.server/
  #     - GF_INSTALL_PLUGINS=grafana-clock-panel
  #   volumes:
  #     - admin_data:/var/lib/grafana
  #   ports:
  #     - '8800:3000'

  # user:
  #   container_name: user
  #   build:
  #     context: ./
  #     dockerfile: apps/user/Dockerfile.local
  #   volumes:
  #     - /app/node_modules
  #   develop:
  #     watch:
  #       - action: sync
  #         path: ./apps/user
  #         target: /app/apps/user
  #         ignore:
  #           - node_modules/
  #       - action: rebuild
  #         path: ./
  #   depends_on:
  #     - user_db

volumes:
  product_data:
